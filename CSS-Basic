#1. Change the Color of Text
We can do this by changing the style of your h2 element.
The property that is responsible for the color of an element's text is the color style property.
<h2 style="color: red;">CatPhotoApp</h2>

#2. Use CSS Selectors to Style Elements
<style>
  h2 {color: blue;}
</style>

#3. Use a CSS Class to Style an Element
Classes are reusable styles that can be added to HTML elements.
<style>
  .red-text {color: red;}
</style>
<h2 class="red-text">CatPhotoApp</h2>

#4. Change the Font Size and Font Family of an Element
<style>
  .red-text {color: red;}
  .p {font-size: 16px; font-family: monospace;}
</style>

#5. Import font from Google Font
<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">
<style>
  .red-text {color: red;}
  h2 { font-family: Lobster;}
  p {
    font-size: 16px;
    font-family: monospace;  }
</style>

#6. Bigger/Smaller image
<style> 
.smaller-image { width: 100px;} </style>

<a href="#"><img src="https://bit.ly/fcc-relaxing-cat" alt="A cute orange cat lying on its back." class="smaller-image"></a>

#7. Add Borders Around Your Elements
<style> 
.thick-green-border {
    border-color: green;
    border-width: 10px;
    border-style: solid;
    border-radius: 50%;
  }
</style>
p.s: border-radius: 50% will make the border circle

#8. Give a Background Color to a div Element
<style>
.silver-background { 
    background-color: silver;}
</style>

#9. Set the id of an Element
There are several benefits to using id attributes: You can use an id to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.
id attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same id attribute.
One cool thing about id attributes is that, like classes, you can style them using CSS.

<form id="cat-photo-form" action="/submit-cat-photo"> </form>

#10. Adjust the Padding of an Element
Three important properties control the space that surrounds each HTML element: padding, margin, and border.
An element's padding controls the amount of space between the element's content and its border.
<style>
.box {
    border-style: solid;
    border-color: black;
    border-width: 5px;
    text-align: center;} 
 .red-box {
    background-color: crimson;
    color: #fff;
    padding: 20px;
    margin: 20px;}
  </style>
  
#11. Negative Margin to an Element
An element's margin controls the amount of space between an element's border and surrounding elements.
If you set an element's margin to a negative value, the element will grow larger.

<style> 
.blue-box {
    background-color: blue;
    color: #fff;
    padding: 20px;
    margin: -15px;
  } </style>
  
  #12. Different Padding / Margin to Each Side of an Element
  CSS allows you to control the padding of all four individual sides of an element with the padding-top, padding-right, padding-bottom, and padding-left properties.
  CSS allows you to control the margin of all four individual sides of an element with the margin-top, margin-right, margin-bottom, and margin-left properties.
  Instead of specifying an element's padding-top, padding-right, padding-bottom, and padding-left properties individually, you can specify them all in one line, like this:
  
  padding: 10px 20px 10px 20px;(top, right, bottom, left)
  
  #13. Use Attribute Selectors to Style Elements
  There are other CSS Selectors you can use to select custom groups of elements to style.
  For this challenge, you will use the [attr=value] attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute type and a corresponding value of radio:
  [type='radio'] {
  margin: 20px 0px 20px 0px;
  }
  
  #14. Style the HTML Body Element
  Every HTML page has a body element.
  We can prove that the body element exists here by giving it a background-color of black.
  body {
  background-color: black;}
  
  #15. Prioritize One Style Over Another
  Sometimes your HTML elements will receive multiple styles that conflict with one another.
  For example, your h1 element can't be both green and pink at the same time.
  
  #16. Override Styles in Subsequent CSS
  We just proved that our classes will override the body element's CSS. So the next logical question is, what can we do to override our pink-text class?
  However, the order of the class declarations in the <style> section are what is important. The second declaration will always take precedence over the first. Because .blue-text is declared second, it overrides the attributes of .pink-text
  <h1 class="pink-text blue-text">Hello World!</h1> <!-- blue-text win -->
  
  <h1 class="pink-text blue-text" id="orange-text">Hello World!</h1> <!-- orange-text win -->
  
  <h1 id="orange-text" class="pink-text blue-text" style="color: white;">Hello World!</h1> <!-- white inline style win -->
  
  .pink-text {color: pink !important;} <!-- pink-text win no matter what --> 
  
  #17. Use Hex Code for Specific Colors
  In CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, #000000 is black and is also the lowest possible value. You can find more information about the RGB color system here.
  
  
  
